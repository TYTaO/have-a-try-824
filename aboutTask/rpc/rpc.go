package rpc

//
// RPC definitions.
//
// remember to capitalize all names.
//

import (
	"os"
	"strings"
	"unicode"
)
import "strconv"

//
// example to show how to declare the arguments
// and reply for an RPC.
//

// 定义通信中的变量
var (
	NOTASK int = -1

	GENERATED   int = 0
	DISTRIBUTED int = 1
	FINISHED    int = 2

	MAPTASK    = 12
	REDUCETASK = 13
)

type NoArgs struct {
}

type NoReply struct {
}

type Task struct {
	Id       int
	State    int // 0: generated   1: distributed   2: finished
	TaskKind int
	TaskFile string
}

type TaskArgs struct {
}

type TaskReply struct {
	T Task
}

type FinishTaskArgs struct {
	Id       int
	TaskKind int
	TaskFile string
}

type FinishTaskReply struct {
}

// Add your RPC definitions here.

// Cook up a unique-ish UNIX-domain socket name
// in /var/tmp, for the master.
// Can't use the current directory since
// Athena AFS doesn't support UNIX-domain sockets.
func masterSock() string {
	s := "824-mr-"
	s = strconv.Itoa(os.Getuid())
	return s
}

type KeyValue struct {
	Key   string
	Value string
}

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
// Map func return: add 1 count for every word(key)
func Map(contents string) []KeyValue {
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)

	kva := []KeyValue{}
	for _, w := range words {
		kv := KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

// reduce
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func Reduce(values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}

// for sorting by key.
type ByKey []KeyValue

// for sorting by key.
func (a ByKey) Len() int           { return len(a) }
func (a ByKey) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a ByKey) Less(i, j int) bool { return a[i].Key < a[j].Key }
